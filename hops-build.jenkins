pipeline {
    agent any

    environment {
        NEXUS_CREDS=credentials("HopsEE")
        HOPS_NATIVE_BRANCH = ''
        DELTA_RS_VERSION = ''
    }
    stages {
        stage('Extract Version Numbers') {
            steps {
                script {
                    def branch = sh(
                        script: "grep 'hdfs-native-object-store' crates/hdfs/Cargo.toml | grep 'branch' | sed -n 's/.*branch *= *\"\\([^\"]*\\)\".*/\\1/p'",
                        returnStdout: true
                    ).trim()
                    echo "Extracted hopsfs object-store version: ${branch}"
                    env.HOPS_NATIVE_BRANCH = branch

                    def DLVersion = sh (
                        script: "cargo metadata --format-version 1 --no-deps 2>/dev/null | jq -r '.packages[] | select(.manifest_path | test(\"python/Cargo.toml$\")) | .version'",
                        returnStdout: true
                    ).trim()
                    echo "Extracted delta-rs version: ${DLVersion}"
                    env.DELTA_RS_VERSION = DLVersion
                }
            }
        }
        stage('Build Wheel Files') {
            steps {
                script {
                    sh 'pwd'
                    sh 'echo building wheel file'
                    sh 'chmod +x hops-build-linux.sh'
                    sh './hops-build-linux.sh'
                }
            }
        }
        stage('Upload Delta Lake Wheel') {
            steps {
                script {
                    sh 'tar -czvf deltalake-${DELTA_RS_VERSION}-${HOPS_NATIVE_BRANCH}.tar.gz -C target/wheels .'
                    sh 'uploading on nexus...'
                    sh 'curl -u $NEXUS_CREDS_USR:$NEXUS_CREDS_PSW --upload-file deltalake-${DELTA_RS_VERSION}-${HOPS_NATIVE_BRANCH}.tar.gz https://nexus.hops.works/repository/dev/hamid/deltalake-${DELTA_RS_VERSION}-${HOPS_NATIVE_BRANCH}.tar.gz'
                }
            }
        }
    }
}